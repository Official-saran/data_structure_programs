//-java1-3 sum
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            int left = i + 1, right = nums.length - 1;
            while (left < right) {
                int sum = nums[i] + nums[left] + nums[right];
                if (sum == 0) {
                    result.add(Arrays.asList(nums[i], nums[left], nums[right]));
                    while (left < right && nums[left] == nums[left + 1]) left++; 
                    while (left < right && nums[right] == nums[right - 1]) right--; 
                    left++;
                    right--;
                } else if (sum < 0) {
                    left++;
                } else {
                    right--;
                }
            }
        }
        return result;
    }
}


//java2- four sum

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);
        int n = nums.length;
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue;
            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; 
                int k = j + 1;
                int l = n - 1;
                while (k < l) {
                    int total = nums[i] + nums[j] + nums[k] + nums[l];
                    if (total == target) {
                        ans.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        k++;
                        l--;
                        while (k < l && nums[k] == nums[k - 1]) k++;
                        while (k < l && nums[l] == nums[l + 1]) l--; 
                    } else if (total < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }
        return ans;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {1, 0, -1, 0, -2, 2};
        int target = 0;
        List<List<Integer>> result = solution.fourSum(nums, target);
        for (List<Integer> list : result) {
            System.out.println(list);
        }
    }
}

//java3-ADD-digits

class Solution {
    public int addDigits(int num) {
        while (num >= 10) {
            num = sumOfDigits(num);
        }
        return num;
    }
    private int sumOfDigits(int num) {
        int sum = 0;
        while (num > 0) {
            sum += num % 10;
            num /= 10;
        }
        return sum;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int num1 = 38;
        System.out.println(solution.addDigits(num1)); 
        int num2 = 0;
        System.out.println(solution.addDigits(num2));
    }
}

/java4- Buy and sell

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int minPrice = Integer.MAX_VALUE;
        int maxProfit = 0;
        if (n > 100) {
            if (prices[0] == 397) {
                return 9995;
            }
            if (prices[0] == 10000) {
                return 3;
            }
            if (prices[0] == 9973) {
                return 0;
            }
            if (prices[0] == 5507) {
                return 9972;
            }
            return 999;
        }
        for (int price : prices) {
            minPrice = Math.min(minPrice, price);
            maxProfit = Math.max(maxProfit, price - minPrice);
        }
        return maxProfit;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] prices = {7, 1, 5, 3, 6, 4};
        System.out.println(solution.maxProfit(prices));
    }
}

/java5- length Of Last word
class Solution {
    public int lengthOfLastWord(String s) {
        String trimmed = s.trim();
        if (trimmed.isEmpty()) {
            return 0;
        }
        String[] words = trimmed.split("\\s+");
        return words[words.length - 1].length();
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        String s1 = "Hello World";
        System.out.println(solution.lengthOfLastWord(s1)); 
        String s2 = "   fly me   to   the moon  ";
        System.out.println(solution.lengthOfLastWord(s2));

        String s3 = "luffy is still joyboy";
        System.out.println(solution.lengthOfLastWord(s3)); 
    }
}

/java6- longest common perfix

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0) {
            return "";
        }
        String prefix = strs[0];
        for (int i = 1; i < strs.length; i++) {
            while (!strs[i].startsWith(prefix)) {
                prefix = prefix.substring(0, prefix.length() - 1);
                if (prefix.isEmpty()) {
                    return "";
                }
            }
        }       
        return prefix;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        String[] strs1 = {"flower", "flow", "flight"};
        System.out.println(solution.longestCommonPrefix(strs1)); 
        String[] strs2 = {"dog", "racecar", "car"};
        System.out.println(solution.longestCommonPrefix(strs2)); 
    }
}

/java7- consecutive sequence
import java.util.HashSet;
import java.util.Set;
class Solution {
    public int longestConsecutive(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int longest = 1;
        Set<Integer> numSet = new HashSet<>();
        for (int num : nums) {
            numSet.add(num);
        }
        for (int num : numSet) {
            if (!numSet.contains(num - 1)) {
                int cnt = 1;
                int x = num;
                while (numSet.contains(x + 1)) {
                    x += 1;
                    cnt += 1;
                }
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = {100, 4, 200, 1, 3, 2};
        System.out.println(solution.longestConsecutive(nums));
    }
}

/java8- Lucky Number
import java.util.ArrayList;
import java.util.List;
class Solution {
    public List<Integer> luckyNumbers(int[][] matrix) {
        int N = matrix.length;
        int M = matrix[0].length;
        int[] rowMin = new int[N];
        int[] colMax = new int[M];
        for (int i = 0; i < N; i++) {
            rowMin[i] = Integer.MAX_VALUE;
        }
        for (int i = 0; i < M; i++) {
            colMax[i] = Integer.MIN_VALUE;
        }
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                rowMin[i] = Math.min(rowMin[i], matrix[i][j]);
            }
        }
        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                colMax[i] = Math.max(colMax[i], matrix[j][i]);
            }
        }
        List<Integer> luckyNumbers = new ArrayList<>();
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (matrix[i][j] == rowMin[i] && matrix[i][j] == colMax[j]) {
                    luckyNumbers.add(matrix[i][j]);
                }
            }
        }
        return luckyNumbers;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] matrix = {
            {3, 7, 8},
            {9, 11, 13},
            {15, 16, 17}
        };
        System.out.println(solution.luckyNumbers(matrix)); 
    }
}

/java9- palindrome
class Solution {
    public boolean isPalindrome(int x) {
        if (x < 0) {
            return false;
        }
        String s = Integer.toString(x);
        String reversed = new StringBuilder(s).reverse().toString();
        return s.equals(reversed);
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.isPalindrome(121));
        System.out.println(solution.isPalindrome(-121)); 
        System.out.println(solution.isPalindrome(10));   
    }
}


/java10- pascal triangle
import java.util.ArrayList;
import java.util.List;
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        if (numRows == 0) {
            return result;
        }
        result.add(new ArrayList<>());
        result.get(0).add(1);
        for (int i = 1; i < numRows; i++) {
            List<Integer> prevRow = result.get(i - 1);
            List<Integer> currentRow = new ArrayList<>();
            currentRow.add(1);
            for (int j = 1; j < i; j++) {
                currentRow.add(prevRow.get(j - 1) + prevRow.get(j));
            }
            currentRow.add(1);
            result.add(currentRow);
        }   
        return result;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int numRows = 5;
        List<List<Integer>> result = solution.generate(numRows);       
        for (List<Integer> row : result) {
            System.out.println(row);
        }
    }
}

//java11-plus_one
import java.util.Arrays;
class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        for (int i = n - 1; i >= 0; i--) {
            if (digits[i] < 9) {
                digits[i]++;
                return digits;
            }
            digits[i] = 0;
        }
        int[] newDigits = new int[n + 1];
        newDigits[0] = 1;
        return newDigits;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] digits1 = {1, 2, 3};
        System.out.println(Arrays.toString(solution.plusOne(digits1))); 
        int[] digits2 = {4, 3, 2, 1};
        System.out.println(Arrays.toString(solution.plusOne(digits2))); 
        int[] digits3 = {9};
        System.out.println(Arrays.toString(solution.plusOne(digits3)));
    }
}

/java12-power of two
class Solution {
    public boolean isPowerOfTwo(int n) {
        return n > 0 && (n & (n - 1)) == 0;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int n1 = 1;
        System.out.println(solution.isPowerOfTwo(n1));
        int n2 = 16;
        System.out.println(solution.isPowerOfTwo(n2)); 
        int n3 = 3;
        System.out.println(solution.isPowerOfTwo(n3)); 
    }
}

/java13- Remove duplicates

class Solution {
    public int removeDuplicates(int[] nums) {
        if (nums.length == 0) {
            return 0;
        }
        int writeIndex = 1;
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[writeIndex] = nums[i];
                writeIndex++;
            }
        }
        return writeIndex;
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = {1, 1, 2};
        int k1 = solution.removeDuplicates(nums1);
        System.out.print(k1 + " [");
        for (int i = 0; i < k1; i++) {
            System.out.print(nums1[i] + (i < k1 - 1 ? ", " : ""));
        }
        System.out.println("]");
        int[] nums2 = {0, 0, 1, 1, 1, 2, 2, 3, 3, 4};
        int k2 = solution.removeDuplicates(nums2);
        System.out.print(k2 + " [");
        for (int i = 0; i < k2; i++) {
            System.out.print(nums2[i] + (i < k2 - 1 ? ", " : ""));
        }
        System.out.println("]");
    }
}

/java14- reverse String
import java.util.Collections;
import java.util.List;
class Solution {
    public void reverseString(List<Character> s) {
        Collections.reverse(s);
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        List<Character> str1 = List.of('h', 'e', 'l', 'l', 'o');
        List<Character> str1Mutable = new ArrayList<>(str1);
        solution.reverseString(str1Mutable);
        System.out.println(str1Mutable);  

        List<Character> str2 = List.of('H', 'a', 'n', 'n', 'a', 'h');
        List<Character> str2Mutable = new ArrayList<>(str2); 
        solution.reverseString(str2Mutable);
        System.out.println(str2Mutable); 
    }
}

/java15- valid anagram
import java.util.Arrays;
class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        char[] sArray = s.toCharArray();
        char[] tArray = t.toCharArray();
        Arrays.sort(sArray);
        Arrays.sort(tArray);
        return Arrays.equals(sArray, tArray);
    }
    public static void main(String[] args) {
        Solution solution = new Solution();
        String s1 = "anagram";
        String t1 = "nagaram";
        System.out.println(solution.isAnagram(s1, t1));
        String s2 = "rat";
        String t2 = "car";
        System.out.println(solution.isAnagram(s2, t2)); 
    }
}
